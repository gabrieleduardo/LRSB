/**
 * LRSB - Linear Representation Spreedsheat Builder - Pauses Analysis of XML files generated by Translog II software.
 * For Translog II details, see http://bridge.cbs.dk/platform/?q=Translog-II.
 *
 * Developed with a grant from the Federal University of Uberlândia, Brazil (Project 2014PBG000883, Supervisor:
 * Prof. Dr. Igor A. Lourenço da Silva)
 *
 * Copyright (C) 2015 Gabriel Ed. da Silva
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General
 * Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along with this program. If not, see
 * http://www.gnu.org/licenses/.
 */
package com.lrsb.spreadsheet;

import com.lrsb.model.Document;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author gabriel
 */
public class SaveToCSV {

    /**
     * Cabeçalho do arquivo CSV não consolidado.
     */
    private static final String HEADER = "sep=,\n"
            + "Subject,Task,ST,STlanguage,TTlanguage,"
            + "MicroUnitId,LinearRep,Pause,Start,End,"
            + "DurationM,FixCountS,FixDurationS,MeanDurationS,FixCountT,"
            + "FixDurationT,MeanDurationT,FixCountST,FixDurationST,MeanDurationST,"
            + "FixCountSPause,FixDurationSPause,MeanDurationSPause,FixCountTPause,"
            + "FixDurationTPause,MeanDurationTPause,FixCountSTPause,FixDurationSTPause,"
            + "MeanDurationSTPause,Visits,VisitsPause,Saccade,SacaddeAngle,SaccadeSum,"
            + "SaccadeMean,SaccadePause,SaccadeAnglePause,SaccadeSumPause,SaccadeMeanPause,"
            + "ins,del\n";

    /**
     * Salva os indicadores processados de um documento para um arquivo no
     * formato CSV.
     *
     * @param doc Documento a ser salvo em CSV.
     * @param filePath Caminho do diretório para salvar o arquivo.
     */
    public static void simpleFileToCSV(Document doc, String filePath) {
        String text = HEADER + doc.documentToCSV();

        if (!save(text, filePath)) {
            //TODO: Adicionar erro ao log
        }
    }

    /**
     * Salva os indicadores processados de cada um dos documentos de uma lista
     * em um único arquivo no formato CSV.
     *
     * @param docList Lista de Documentos a serem salvos em um CSV.
     * @param filePath Caminho do diretório para salvar o arquivo.
     * @return True em caso de sucesso, False em caso de falha.
     */
    public static boolean singleFileToCSV(ArrayList<Document> docList, String filePath) {
        String text = HEADER;

        for (Document doc : docList) {
            text += doc.documentToCSV();
        }

        if (!save(text, filePath)) {
            //TODO: Adicionar erro ao log
            return false;
        }

        return true;
    }

    /**
     * Persiste o texto em arquivo no diretório especificado.
     *
     * @param text O texto a ser persistido em arquivo.
     * @param filePath O caminho do diretório para persistir o arquivo.
     * @return True se o arquivo foi salvo com sucesso. False case tenha
     * ocorrido algum erro.
     */
    public static boolean save(String text, String filePath) {
        try (FileWriter fw = new FileWriter(filePath)) {
            fw.append(text);
            fw.close();
            return true;
        } catch (IOException ex) {
            Logger.getLogger(SaveToCSV.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            //TODO: Adicionar erro ao log
            return false;
        }
    }
}
