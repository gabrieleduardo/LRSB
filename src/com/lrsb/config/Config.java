/**
 * LRSB - Linear Representation Spreedsheat Builder - Pauses Analysis of XML
 * files generated by Translog II software. For Translog II details, see
 * http://bridge.cbs.dk/platform/?q=Translog-II.
 *
 * Developed with a grant from the Federal University of Uberlândia, Brazil
 * (Project 2014PBG000883, Supervisor: Prof. Dr. Igor A. Lourenço da Silva)
 *
 * Copyright (C) 2015 Gabriel Ed. da Silva
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 */
package com.lrsb.config;
import java.io.File;
import java.io.Serializable;

/**
 * Requisitos Funcionais: RF02, RF03, RF08, RF09 Descrição de classe: A Classe
 * Config é responsável por armazenar as configurações do usuário.
 *
 * @author Gabriel Ed.
 */

//TODO Alterar a classe para utilizar JSON e não binários para a configuração da aplicação.

public class Config implements Serializable {

    /**
     * Váriavel responsável por marcar se devem ser processados documentos
     * individuais ou diretórios completos.
     */
    public boolean fullDirectory;

    /**
     * Valor de pausa inicial do intervalo
     */
    public String defaultPauseBegin;

    /**
     * Valor de pausa final do intervalo
     */
    public String defaultPauseEnd;

    /**
     * Caminho padrão para os documentos gerados
     */
    public String defaultPath;

    /**
     * Path para criação do diretório padrão da aplicação.
     */
    public String userDir = System.getProperty("user.home") + File.separator + "LRSB" + File.separator + "Spreadsheets";

    /**
     * Construtor da Aplicação - Design Pattern Singleton
     */
    private Config() {
        fullDirectory = false;
        defaultPath = userDir; //Adicionar o diretório padrão.
        defaultPauseBegin = "2400";
        defaultPauseEnd = "*";
        makeDir();
    }

    /**
     * Reseta as configurações para o padrão.
     */
    public void resetConfig() {
        makeDir();
        saveConfig(false, userDir, "2400", "*");
    }

    /**
     * Cria o diretório padrão da aplicação.
     */
    private void makeDir() {
        new File(userDir).mkdirs();
    }

    /**
     * Salva uma nova configuração em um arquivo binário.
     * 
     * @param fullDirectory Identifica se todos os arquivos do diretório devem 
     * ser processados em um único arquivo.
     * @param defaultPath Caminho padrão padrão para os documentos gerados.
     * @param defaultPauseBegin Valor inicial do intervalo de pausas.
     * @param defaultPauseEnd Valor final do intervalo de pausas.
     */
    public void saveConfig(Boolean fullDirectory, String defaultPath, String defaultPauseBegin, String defaultPauseEnd) {
        this.fullDirectory = fullDirectory;
        this.defaultPath = defaultPath;
        this.defaultPauseBegin = defaultPauseBegin;
        this.defaultPauseEnd = defaultPauseEnd;
        boolean save = ConfigPersistence.save(this);
    }

    /**
     * Verifica se a opção Full Directory está marcada como padrão.
     * @return True se estiver marcada - False caso não esteja.
     */
    public boolean isFullDirectory() {
        return fullDirectory;
    }

    /**
     * Recupera o valor inicial padrão para o intervalo de pausa
     * @return Valor inicial do intervalo
     */
    public String getDefaultPauseBegin() {
        return defaultPauseBegin;
    }

    /**
     * Recupera o valor final padrão para o intervalo de pausa
     * @return Valor final do intervalo
     */
    public String getDefaultPauseEnd() {
        return defaultPauseEnd;
    }

    
    /**
     * Recupera o caminho padrão para os documentos gerados.
     * @return 
     */
    public String getDefaultPath() {
        return defaultPath;
    }

    /**
     * Recupera uma instância única da classe Config conforme Design Pattern 
     * Singleton.
     *
     * @return Instância da classe Config
     */
    public static Config getInstance() {
        return ConfigHolder.INSTANCE;
    }

    /**
     * Classe Holder que armazena uma instância da classe Config e a inicializa
     * caso necessário.
     */
    private static class ConfigHolder {

        
        /**
         * Instância única da classe conforme padrão Singleton.
         */
        private static final Config INSTANCE = configInstanceInit();

        /**
         * O método carrega a configuração padrão da classe através de um
         * arquivo binário, caso não exista ele carrega a instância com os
         * dados padrões.
         * @return Objeto Config preenchido.
         */
        private static Config configInstanceInit() {
            Config cfg = (Config) ConfigPersistence.load();
            if (cfg == null) {
                cfg = new Config();
                ConfigPersistence.save(cfg);
            }
            return cfg;
        }
    }
}
