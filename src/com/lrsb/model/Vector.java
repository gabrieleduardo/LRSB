/**
 * LRSB - Linear Representation Spreedsheat Builder - Pauses Analysis of XML files generated by Translog II software.
 * For Translog II details, see http://bridge.cbs.dk/platform/?q=Translog-II.
 *
 * Developed with a grant from the Federal University of Uberlândia, Brazil (Project 2014PBG000883, Supervisor:
 * Prof. Dr. Igor A. Lourenço da Silva)
 *
 * Copyright (C) 2015 Gabriel Ed. da Silva
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General
 * Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along with this program. If not, see
 * http://www.gnu.org/licenses/.
 */
package com.lrsb.model;

/**
 * Classe responsável pela criação de um vetor a ser utilizado no cálculo do
 * angulo entre sacadas.
 *
 * @author gabriel
 *
 * Código baseado no original disponibilizado em:
 * https://github.com/utluiz/java-playground/blob/master/random-code/src/main/java/br/com/starcode/angulovetores/AnguloVetores.java
 *
 */
public class Vector {

    private static final Point POINT_ZERO = new Point(0, 0);

    private final Point p;
    private final Point q;

    private Vector(Point p, Point q) {
        this.p = p;
        this.q = q;
    }

    /**
     * Cálcula o ângulo entre dois vetores
     *
     * @param x1 Coordenada X do primeiro vetor.
     * @param y1 Coordenada Y do primeiro vetor.
     * @param x2 Coordenada X do segundo vetor.
     * @param y2 Coordenada Y do segundo vetor.
     * @return O ângulo entre os vetores.
     */
    public static Double getAngle(Integer x1, Integer y1, Integer x2, Integer y2) {
        Vector p = new Vector(POINT_ZERO, new Point(x1, y1));
        Vector q = new Vector(POINT_ZERO, new Point(x2, y2));

        return Math.acos(
                (p.i() * q.i() + p.j() * q.j()) / (p.size() * q.size())
        ) * (180 / Math.PI);
    }

    private double i() {
        return q.getX() - p.getX();
    }

    private double j() {
        return q.getY() - p.getY();
    }

    /**
     * Cálcula o tamanho do vetor por meio da distância eucliadiana entre os
     * pontos do vetor.
     *
     * @return Tamanho calculado.
     */
    public double size() {
        return Math.sqrt(
                (q.getX() - p.getX()) * (q.getX() - p.getX())
                + (q.getY() - p.getY()) * (q.getY() - p.getY()));
    }
}

/**
 * Subclasse que representa um ponto no plano cartesiano.
 *
 * @author gabriel
 */
class Point {

    Integer x, y;

    public Point(Integer x, Integer y) {
        this.x = x;
        this.y = y;
    }

    public Integer getX() {
        return x;
    }

    public void setX(Integer x) {
        this.x = x;
    }

    public Integer getY() {
        return y;
    }

    public void setY(Integer y) {
        this.y = y;
    }

}
