/**
 * LRSB - Linear Representation Spreedsheat Builder - Pauses Analysis of XML files generated by Translog II software. 
 * For Translog II details, see http://bridge.cbs.dk/platform/?q=Translog-II.
 * 
 * Developed with a grant from the Federal University of Uberlândia, Brazil (Project 2014PBG000883, Supervisor: 
 * Prof. Dr. Igor A. Lourenço da Silva)
 * 
 * Copyright (C) 2015 Gabriel Ed. da Silva
 * 
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General 
 * Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Affero General Public License along with this program. If not, see
* http://www.gnu.org/licenses/.
 */

package com.lrsb.model;

import java.util.ArrayList;

/**
 * RF04,RF18
 * 
 * Classe responsável por armazenar as informações processadas do arquivo XML.
 *
 * @author gabriel
 */
public class Document {

    private String subject;
    private String task;
    private String st;
    private String stLanguage;
    private String ttLanguage;
    private ArrayList<Segment> segments = new ArrayList<>();

    /**
     * @return the subject
     */
    public String getSubject() {
        return subject;
    }

    /**
     * @param subject the subject to set
     */
    public void setSubject(String subject) {
        this.subject = subject;
    }

    /**
     * @return the task
     */
    public String getTask() {
        return task;
    }

    /**
     * @param task the task to set
     */
    public void setTask(String task) {
        this.task = task;
    }

    /**
     * @return the st
     */
    public String getSt() {
        return st;
    }

    /**
     * @param st the st to set
     */
    public void setSt(String st) {
        this.st = st;
    }

    /**
     * @return the stLanguage
     */
    public String getStLanguage() {
        return stLanguage;
    }

    /**
     * @param stLanguage the stLanguage to set
     */
    public void setStLanguage(String stLanguage) {
        this.stLanguage = stLanguage;
    }

    /**
     * @return the ttLanguage
     */
    public String getTtLanguage() {
        return ttLanguage;
    }

    /**
     * @param ttLanguage the ttLanguage to set
     */
    public void setTtLanguage(String ttLanguage) {
        this.ttLanguage = ttLanguage;
    }

    /**
     * @return the segments
     */
    public ArrayList<Segment> getSegments() {
        return segments;
    }

    /**
     * @param segments the segments to set
     */
    public void setSegments(ArrayList<Segment> segments) {
        this.segments = segments;
    }

    /**
     * Cria uma string formatada com os dados do documento para serem salvos no 
     * formato CSV.
     * 
     * @return String formatada. 
     */
    public String documentToCSV() {
        String str = "";
        String aux = subject + "," + task + "," + st + "," + stLanguage + "," + ttLanguage + ",";

        for (Segment s : segments) {
            str = str + aux + s.segmentToCSV();
        }

        return str;
    }

    /**
     * TODO
     * 
     * RF18
     * @return 
     */
    
    /*
    public ConsolidatedDocument getConsilidatedDocument() {
        ConsolidatedDocument cd = new ConsolidatedDocument();

        for (Segment s : segments) {
            //cd.totalDuration = ;
            cd.setTotalFixCountS((Double) (cd.getTotalFixCountS() + s.getFixCountS()));
            cd.setTotalFixDurS((Double) (cd.getTotalFixDurS() + s.getFixDurationS()));
            cd.setTotalFixCountT((Double) (cd.getTotalFixCountT() + s.getFixCountT()));
            cd.setTotalFixDurT((Double) (cd.getTotalFixDurT() + s.getFixDurationT()));
            cd.setTotalFixCountST((Double) (cd.getTotalFixCountST() + s.getFixCountST()));
            cd.setTotalFixDurST((Double) (cd.getTotalFixDurST() + s.getFixDurationST()));
            cd.setTotalVisits((Double) (cd.getTotalVisits() + s.getVisits()));
            cd.setTotalIns((Double) (cd.getTotalIns() + s.getIns()));
            cd.setTotalDel((Double) (cd.getTotalDel() + s.getDel()));
            //cd.totalSaccade += s.getSaccadeSum();
            //cd.totalSaccadeSize += s.getS;
            cd.setPtotalFixCountS(cd.getPtotalFixCountS() + s.getFixCountSPause());
            cd.setPtotalFixDurS(cd.getPtotalFixDurS() + s.getFixDurationSPause());
            cd.setPtotalFixCountT(cd.getPtotalFixCountT() + s.getFixCountSTPause());
            cd.setPtotalFixDurT(cd.getPtotalFixDurT() + s.getFixDurationTPause());
            cd.setPtotalFixCountST(cd.getPtotalFixCountST() + s.getFixCountSTPause());
            cd.setPtotalVisits(cd.getPtotalVisits() + s.getVisitsPause());
        }

        cd.setTotalMeanFixS(cd.getTotalFixDurS() / segments.size());
        cd.setTotalMeanFixT(cd.getTotalFixDurT() / segments.size());
        cd.setTotalMeanFixST(cd.getTotalFixDurST() / segments.size());
        //cd.totalMeanSaccade;
        //cd.setPtotalMeanFixS(cd.total);
        cd.setPtotalMeanFixT(null);
        return cd;
    }
    */
}
