/**
 * LRSB - Linear Representation Spreedsheat Builder - Pauses Analysis of XML files generated by Translog II software. 
 * For Translog II details, see http://bridge.cbs.dk/platform/?q=Translog-II.
 * 
 * Developed with a grant from the Federal University of Uberlândia, Brazil (Project 2014PBG000883, Supervisor: 
 * Prof. Dr. Igor A. Lourenço da Silva)
 * 
 * Copyright (C) 2015 Gabriel Ed. da Silva
 * 
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General 
 * Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Affero General Public License along with this program. If not, see
* http://www.gnu.org/licenses/.
 */

package com.lrsb.model;

import java.util.ArrayList;

/**
 * RF04,RF18
 * 
 * Classe responsável por armazenar as informações processadas do arquivo XML.
 *
 * @author gabriel
 */
public class Document {
    
    public static final String HEADER = createHeader();

    private String subject;
    private String task;
    private String st;
    private String stLanguage;
    private String ttLanguage;
    private ArrayList<Segment> segments = new ArrayList<>();

    /**
     * @return the subject
     */
    public String getSubject() {
        return subject;
    }

    /**
     * @param subject the subject to set
     */
    public void setSubject(String subject) {
        this.subject = subject;
    }

    /**
     * @return the task
     */
    public String getTask() {
        return task;
    }

    /**
     * @param task the task to set
     */
    public void setTask(String task) {
        this.task = task;
    }

    /**
     * @return the st
     */
    public String getSt() {
        return st;
    }

    /**
     * @param st the st to set
     */
    public void setSt(String st) {
        this.st = st;
    }

    /**
     * @return the stLanguage
     */
    public String getStLanguage() {
        return stLanguage;
    }

    /**
     * @param stLanguage the stLanguage to set
     */
    public void setStLanguage(String stLanguage) {
        this.stLanguage = stLanguage;
    }

    /**
     * @return the ttLanguage
     */
    public String getTtLanguage() {
        return ttLanguage;
    }

    /**
     * @param ttLanguage the ttLanguage to set
     */
    public void setTtLanguage(String ttLanguage) {
        this.ttLanguage = ttLanguage;
    }

    /**
     * @return the segments
     */
    public ArrayList<Segment> getSegments() {
        return segments;
    }

    /**
     * @param segments the segments to set
     */
    public void setSegments(ArrayList<Segment> segments) {
        this.segments = segments;
    }

    /**
     * Cria uma string formatada com os dados do documento para serem salvos no 
     * formato CSV.
     * 
     * @return String formatada. 
     */
    public String documentToCSV() {
        String str = "";
        String aux = subject + "," + task + "," + st + "," + stLanguage + "," + ttLanguage + ",";

        for (Segment s : segments) {
            str = str + aux + s.segmentToCSV();
        }

        return str;
    }

    /**
     * TODO
     * 
     * RF18
     * @return 
     */
    
    public ConsolidatedDocument getConsolidatedDocument() {
        ConsolidatedDocument cd = new ConsolidatedDocument();
        cd.consolidatedDocumentInit(this);

        for (Segment s : segments) {
            cd.setTotalDuration(cd.getTotalDuration() + s.getDurationM());
            cd.setTotalFixCountS(cd.getTotalFixCountS() + s.getFixCountS());
            cd.setTotalFixDurS((cd.getTotalFixDurS() + s.getFixDurationS()));
            cd.setTotalFixCountT( (cd.getTotalFixCountT() + s.getFixCountT()));
            cd.setTotalFixDurT((cd.getTotalFixDurT() + s.getFixDurationT()));
            cd.setTotalFixCountST( (cd.getTotalFixCountST() + s.getFixCountST()));
            cd.setTotalFixDurST( (cd.getTotalFixDurST() + s.getFixDurationST()));
            cd.setTotalVisits((cd.getTotalVisits() + s.getVisits()));
            cd.setTotalIns( (cd.getTotalIns() + s.getIns()));
            cd.setTotalDel((cd.getTotalDel() + s.getDel()));
            cd.setPtotalFixCountS(cd.getPtotalFixCountS() + s.getFixCountSPause());
            cd.setPtotalFixDurS(cd.getPtotalFixDurS() + s.getFixDurationSPause());
            cd.setPtotalFixCountT(cd.getPtotalFixCountT() + s.getFixCountSTPause());
            cd.setPtotalFixDurT(cd.getPtotalFixDurT() + s.getFixDurationTPause());
            cd.setPtotalFixCountST(cd.getPtotalFixCountST() + s.getFixCountSTPause());
            cd.setPtotalVisits(cd.getPtotalVisits() + s.getVisitsPause());
        }

        System.out.println(cd.toCSV());
        return cd;
    }
    
    public static String createHeader(){
            return "sep=,\n"
            + "Subject"
            + ",Task"
            + ",ST"
            + ",STlanguage"
            + ",TTlanguage"
            + ",MicroUnitId"
            + ",LinearRep"
            + ",Pause"
            + ",Start"
            + ",End"
            + ",DurationM"
            + ",FixCountS"
            + ",FixDurationS"
            + ",MeanDurationS"
            + ",FixCountT"
            + ",FixDurationT"
            + ",MeanDurationT"
            + ",FixCountST"
            + ",FixDurationST"
            + ",MeanDurationST"
            + ",FixCountSPause"
            + ",FixDurationSPause"
            + ",MeanDurationSPause"
            + ",FixCountTPause"
            + ",FixDurationTPause,"
            + "MeanDurationTPause,"
            + "FixCountSTPause,"
            + "FixDurationSTPause"
            + ",MeanDurationSTPause"
            + ",Visits"
            + ",VisitsPause"
            + ",Saccade"
            + ",SacaddeAngle"
            + ",SaccadeSum"
            + ",SaccadeMean"
            + ",SaccadePause"
            + ",SaccadeAnglePause"
            + ",SaccadeSumPause"
            + ",SaccadeMeanPause"
            + ",ins"
            + ",del"
            + "\n";
    }
}
