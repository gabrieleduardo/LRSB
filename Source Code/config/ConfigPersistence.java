/**
 * LRSB - Linear Representation Spreedsheat Builder - Pauses Analysis of XML files generated by Translog II software. 
 * For Translog II details, see http://bridge.cbs.dk/platform/?q=Translog-II.
 * 
 * Developed with a grant from the Federal University of Uberlândia, Brazil (Project 2014PBG000883, Supervisor: 
 * Prof. Dr. Igor A. Lourenço da Silva)
 * 
 * Copyright (C) 2015 Gabriel Ed. da Silva
 * 
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General 
 * Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Affero General Public License along with this program. If not, see
* http://www.gnu.org/licenses/.
 */

package com.lrsb.config;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Classe responsável pela persistência da configuração
 * @author gabriel
 */
public class ConfigPersistence {

    /**
     * Modifique caso deseje modificar o diretório padrão para persistência do 
     * arquivo de configuração.
     */
    private static final String path = "cfg";

    /**
     * Salva a configuração como um objeto serializavel.
     * @param obj - Objeto da classe Config.
     * @return Valor booleano representando o sucesso ou fracasso da operação
     */
    public static boolean save(Object obj) {

        FileOutputStream fileWriter = null;
        ObjectOutputStream objWriter;

        try {
            fileWriter = new FileOutputStream(path);
            objWriter = new ObjectOutputStream(fileWriter);
            objWriter.writeObject(obj);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ConfigPersistence.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ConfigPersistence.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (fileWriter != null) {
                    fileWriter.close();
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

        return true;

    }

    /**
     * Classe responsável por carregar um objeto de Configuração.
     * @return O objeto de Configuração
     */
    public static Object load() {
        ObjectInputStream objReader;
        FileInputStream fileReader = null;
        Object obj = null;
        try {
            fileReader = new FileInputStream(path);
            objReader = new ObjectInputStream(fileReader);
            obj = objReader.readObject();
        } catch (IOException | ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        } finally {
            try {
                if (fileReader != null) {
                    fileReader.close();
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
        return obj;
    }
}
