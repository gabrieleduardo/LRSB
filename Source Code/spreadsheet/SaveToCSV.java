/**
 * LRSB - Linear Representation Spreedsheat Builder - Pauses Analysis of XML files generated by Translog II software. 
 * For Translog II details, see http://bridge.cbs.dk/platform/?q=Translog-II.
 * 
 * Developed with a grant from the Federal University of Uberlândia, Brazil (Project 2014PBG000883, Supervisor: 
 * Prof. Dr. Igor A. Lourenço da Silva)
 * 
 * Copyright (C) 2015 Gabriel Ed. da Silva
 * 
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General 
 * Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Affero General Public License along with this program. If not, see
* http://www.gnu.org/licenses/.
 */

package com.lrsb.spreadsheet;

import com.lrsb.model.ConsolidatedDocument;
import com.lrsb.model.Document;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author gabriel
 */
public class SaveToCSV {

    /**
     * 
     * @param doc
     * @param filePath 
     */
    
    public static void saveDocument(Document doc, String filePath) {
        try {
            FileWriter fw = new FileWriter(filePath);
            fw.append(Document.HEADER);
            fw.append(doc.documentToCSV());
            fw.close();

        } catch (IOException ex) {
            Logger.getLogger(SaveToCSV.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * 
     * @param docList
     * @param filePath 
     */
    
    public static void saveDocumentSinglefile(ArrayList<Document> docList, String filePath) {
        try {
            FileWriter fw = new FileWriter(filePath);
            fw.append(Document.HEADER);
            for(Document doc : docList){
                fw.append(doc.documentToCSV());
            }
            fw.close();

        } catch (IOException ex) {
            Logger.getLogger(SaveToCSV.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static void saveConsolidated(ConsolidatedDocument doc, String filePath) {
        try {
            FileWriter fw = new FileWriter(filePath);
            fw.append(ConsolidatedDocument.HEADER);
            fw.append(doc.toCSV());
            fw.close();

        } catch (IOException ex) {
            Logger.getLogger(SaveToCSV.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static void saveConsolidatedList(ArrayList<Document> docList, String filePath) {
        try {
            FileWriter fw = new FileWriter(filePath);
            fw.append(ConsolidatedDocument.HEADER);
            for(Document doc : docList){
                fw.append(doc.getConsolidatedDocument().toCSV());
            }
            fw.close();

        } catch (IOException ex) {
            Logger.getLogger(SaveToCSV.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
